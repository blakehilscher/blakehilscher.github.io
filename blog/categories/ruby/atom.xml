<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Blake Hilscher]]></title>
  <link href="http://blake.hilscher.ca/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blake.hilscher.ca/"/>
  <updated>2014-07-18T12:08:09-04:00</updated>
  <id>http://blake.hilscher.ca/</id>
  <author>
    <name><![CDATA[Blake Hilscher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gallerize: Static Gallery Generator Ruby Gem]]></title>
    <link href="http://blake.hilscher.ca/blog/2014/07/17/gallerize-gem/"/>
    <updated>2014-07-17T09:30:20-04:00</updated>
    <id>http://blake.hilscher.ca/blog/2014/07/17/gallerize-gem</id>
    <content type="html"><![CDATA[<p>A static gallery generator gem that creates beautiful responsive layouts.</p>

<p><code>
gem install gallerize-cli
</code></p>

<h3>Usage</h3>

<p><code>
$ cd folder-with-pictures
$ gallerize
$ open static-gallery/index.html
</code></p>

<p><a href="http://examples.hilscher.ca/gallerize/">Example Gallery</a>
<a href="https://github.com/blakehilscher/gallerize">Documentation</a></p>

<!-- more -->


<h3>Overview</h3>

<ul>
<li>generate a static gallery from a folder of images</li>
<li>responsive layout</li>
<li>thumbnails and fullsize are generated automatically</li>
<li>does not alter existing directory</li>
</ul>


<h3>Installation</h3>

<p><code>
gem install gallerize-cli
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grape API Formatter for Sending Inline Data.]]></title>
    <link href="http://blake.hilscher.ca/blog/2013/03/10/grape-inline-data/"/>
    <updated>2013-03-10T22:14:48-04:00</updated>
    <id>http://blake.hilscher.ca/blog/2013/03/10/grape-inline-data</id>
    <content type="html"><![CDATA[<p>I needed to add a .png formatter to the <a href="http://quandl.com/help/api">quandl</a> Grape API.</p>

<p>The png is generated using phantomjs, so it needed to be sent down inline.</p>

<p>```ruby
content_type :png, &ldquo;image/png&rdquo;</p>

<p>formatter :png, lambda { |response, env|</p>

<pre><code>path = response.try(:object).try(:to_png)
rack = Rack::Response.new(File.read(path) , 200, { "Content-type" =&gt; "image/png" }).finish
rack[2].body[0]
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate Images With Phantomjs.]]></title>
    <link href="http://blake.hilscher.ca/blog/2013/02/09/phantomjs/"/>
    <updated>2013-02-09T21:14:48-05:00</updated>
    <id>http://blake.hilscher.ca/blog/2013/02/09/phantomjs</id>
    <content type="html"><![CDATA[<p>These images are generated through the <a href="http://quandl.com">quandl</a> api using the png response type. Other supported response types are json, xml, csv, xls, and html. The api provides programatic access to trim, collapse, transform, merge, and order datasets.</p>

<!-- more -->


<p><a target='blank' href='http://www.quandl.com/OFDP/COBALT_51-Cobalt-Price-Cash?utm_source=quandl&utm_medium=graph' /><img src='http://www.quandl.com/OFDP-Open-Financial-Data-Project/COBALT_51-Cobalt-Price-Cash.png?dataset[trim_start]=2013-07-02&dataset[trim_end]=2014-02-13&dataset[width]=853&dataset[height]=480&dataset[visible_columns]=0&dataset[y_axis_min]=24500&dataset[y_axis_max]=31300&dataset[y_axis_dual_min]=null&dataset[y_axis_dual_max]=null&dataset[graph_title]=Cobalt%20Price%3A%20Cash&dataset[graph_source]=Open%20Financial%20Data%20Project' alt='Graph of Cobalt Price: Cash'/></a></p>

<p><a target='blank' href='http://www.quandl.com/BITCOIN/BTCEUSD-Bitcoin-Markets-btceUSD?utm_source=quandl&utm_medium=graph' /><img src='http://www.quandl.com/BITCOIN-Bitcoin-Charts/BTCEUSD-Bitcoin-Markets-btceUSD.png?dataset[trim_start]=2013-05-16&dataset[trim_end]=2014-02-15&dataset[width]=853&dataset[height]=480&dataset[visible_columns]=0&dataset[y_axis_min]=65.501&dataset[y_axis_max]=1072.5&dataset[y_axis_dual_min]=null&dataset[y_axis_dual_max]=null&dataset[graph_title]=Bitcoin%20Markets%20(btceUSD)&dataset[graph_source]=Bitcoin%20Charts' alt='Graph of Bitcoin Markets (btceUSD)'/></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Invoke a Proc in the Context of Another Object.]]></title>
    <link href="http://blake.hilscher.ca/blog/2012/10/30/proc/"/>
    <updated>2012-10-30T22:14:48-04:00</updated>
    <id>http://blake.hilscher.ca/blog/2012/10/30/proc</id>
    <content type="html"><![CDATA[<p>```ruby
class ObjectContext</p>

<p>  def initialize</p>

<pre><code>@number = 10
</code></pre>

<p>  end</p>

<p>  def evaluate(proc)</p>

<pre><code>instance_exec &amp;proc
</code></pre>

<p>  end</p>

<p>end</p>

<h1>our multiplication proc</h1>

<p>t = &ndash;> { puts( @number * @number) }</p>

<h1>evaluate in current context</h1>

<p>@number = 5
t.call #=> 25</p>

<h1>evaluate in context of an ObjectFactory instance</h1>

<p>o = ObjectContext.new
o.evaluate(t) #=> 100
```</p>
]]></content>
  </entry>
  
</feed>
